program = { SOI ~ body ~ EOI }
body = _{ exprs }

keyword        = @{
    fun
  | do
  | end
  | ret
  | true
  | false
  | let
  | load
  | pipe
  | if
  | elif
  | else
  | not
  | or
  | and
  | addition
  | subtraction
  | division
  | multiplication
  | power
  | modulo
  | then
}
fun            = @{ "fun" }
do             = @{ "do" }
end            = @{ "end" }
ret            = @{ "ret" }
true           = @{ "true" }
false          = @{ "false" }
let            = @{ "let" }
load           = @{ "load" }
pipe           = @{ "pipe" }
if             = @{ "if" }
elif           = @{ "elif" }
else           = @{ "else" }
not            = @{ "not" }
or             = @{ "or" }
and            = @{ "and" }
addition       = @{ "add" | "+" }
subtraction    = @{ "sub" | "-" }
division       = @{ "div" | "/" }
multiplication = @{ "mul" | "*" }
power          = @{ "pow" | "^" }
modulo         = @{ "mod" | "%" }
then           = @{ "then" }

// can be ident
it = @{ "it" }

str  = @{ "'" ~ char* ~ "'" }
char =  {
    !("'") ~ ANY
}

bool  = @{ true | false }
num   = _{ float | int }
int   = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
arr   =  { comma_sep }

// Any alphanumeric string that does not begin with a digit except keywords
ident     = @{ !(ASCII_DIGIT) ~ !(keyword ~ !ASCII_ALPHANUMERIC) ~ ASCII_ALPHANUMERIC+ }
idents    = ${ (ident) ~ (ident_seg)* }
ident_seg = _{ WHITESPACE ~ expr }

func         =  { func_declare ~ NLS ~ func_block }
func_declare = _{ fun ~ ident ~ func_params }
func_params  =  { (ident)* }
func_block   = _{ do ~ NLS ~ func_body ~ NLS ~ end }
func_body    =  { ((expr | func_return) ~ NLS)* }
func_return  = _{ ret ~ (expr)* }

var_declare = { let ~ ident ~ var_init? }
var_init    = { load ~ expr }
assmnt      = { ident ~ load ~ expr }

pipeline     =  { pipable_expr ~ pipeline_seg+ ~ !(pipe) }
pipable_expr = _{ bool | num | str | idents }
pipeline_seg =  { (NLS ~ pipe ~ pipable_expr) }

comma_sep            =  { (comma_separable_expr ~ ",")+ ~ comma_separable_expr? }
comma_separable_expr = _{ bool | num | str | idents }

dot_sep            =  { (dot_separable_expr ~ ".")+ ~ dot_separable_expr }
dot_separable_expr = _{ bool | num | str | ident }

if_expr  = { if ~ expr ~ NLS ~ do ~ exprs ~ (end | else_seg | elif_seg) }
elif_seg = { elif ~ expr ~ NLS ~ do ~ exprs ~ (end | else_seg | elif_seg) }
else_seg = { else ~ NLS ~ do ~ exprs ~ end }

// TODO: pack every other type of expr in this rule except unary, binary and ternery
// then in each rule, | it with the other two expr
logical_operand = @{ (val_expr | idents) }
unary_op        =  { not | subtraction | addition }
unary_expr      =  { unary_op ~ expr }
binary_op       = _{
    or
  | and
  | addition
  | subtraction
  | division
  | multiplication
  | power
  | modulo
}
binary_expr     =  { logical_operand ~ binary_op ~ expr }
ternary_expr    =  { logical_operand ~ then ~ logical_operand ~ else ~ logical_operand }

val_expr = _{
    arr
  | bool
  | num
  | str
}

declaration_expr = _{
    var_declare
  | assmnt
  | func
}

control_flow_expr = _{ if_expr }

member_access = @{ dot_sep }

expr  =  {
    member_access
  | ternary_expr
  | unary_expr
  | binary_expr
  | pipeline
  | val_expr
  | declaration_expr
  | control_flow_expr
  | idents
}
exprs = {
    NLS ~ (expr ~ NLS)* ~ NLS
}

WHITESPACE = _{ " " }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
NLS        = _{ (NEWLINE)* }
